{"version":3,"sources":["Components/Misc.js","Components/Proficiency.js","Components/Stats.js","Components/Generate.js","Components/Dropdown.js","App.js","reportWebVitals.js","index.js"],"names":["Misc","playerClass","playerLevel","skillMods","hitDice","id","Proficiency","profBonus","playerStats","profSkills","maxProfSkills","i","length","className","Stats","Generate","playerRace","useState","setPlayerStats","setProfSkills","setMaxProfSkills","setHitDice","onClick","rolls","Math","floor","random","stats","sort","a","b","GenerateStats","Dropdown","setPlayerRace","setPlayerClass","setPlayerLevel","races","classes","name","onChange","e","event","target","value","handleRaceChange","handleClassChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ea8230a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Misc = ({playerClass, playerLevel, skillMods, hitDice}) => {\n    return (\n        <div id=\"compMisc\">\n            <h1>Unarmored AC: {10 + \" \" + skillMods[1]}</h1> \n            <h1>Initiative: {skillMods[1]}</h1>\n            <h1>Hit Dice: {playerLevel}{hitDice}</h1>\n        </div>\n    )\n}\n\nexport default Misc;","import React from 'react';\nimport Misc from './Misc';\n\nconst Proficiency = ({playerClass, playerLevel, playerStats, skillMods, profSkills, maxProfSkills, hitDice}) => {\n    let profBonus;\n\n    if (playerLevel <= 4) {\n        profBonus = 2;\n    } else if (playerLevel <= 8) {\n        profBonus = 3;\n    } else if (playerLevel <= 12) {\n        profBonus = 4;\n    } else if (playerLevel <= 16) {\n        profBonus = 5;\n    } else {\n        profBonus = 6;\n    }\n\n    // Calculate modifiers for skills of each stat type (Athletics = STR mod, Arcana = INT mod)\n    for (var i = 0; i <= profSkills.length; i++) {\n        // STR Skills Mod\n        if (profSkills[i] === \"Athletics\") {\n            profSkills[i] += \" \" + skillMods[0];\n        // DEX Skills Mod\n        } else if (profSkills[i] === \"Acrobatics\" ||\n                    profSkills[i] === \"Sleight of Hand\" ||\n                    profSkills[i] === \"Stealth\") {\n                        profSkills[i] += \" \" + skillMods[1];\n        // INT Skills Mod (Skipping CON since no related skills exist)\n        } else if (profSkills[i] === \"Arcana\" ||\n                    profSkills[i] === \"History\" ||\n                    profSkills[i] === \"Nature\" ||\n                    profSkills[i] === \"Religion\") {\n                        profSkills[i] += \" \" + skillMods[3];\n        // WIS Skills Mod\n        } else if (profSkills[i] === \"Animal Handling\" ||\n                    profSkills[i] === \"Insight\" ||\n                    profSkills[i] === \"Medicine\" ||\n                    profSkills[i] === \"Perception\" ||\n                    profSkills[i] === \"Survival\") {\n                        profSkills[i] += \" \" + skillMods[4];\n        // CHA Skills Mod\n        } else if (profSkills[i] === \"Deception\" ||\n                    profSkills[i] === \"Intimidation\" ||\n                    profSkills[i] === \"Performance\" ||\n                    profSkills[i] === \"Persuasion\") {\n                        profSkills[i] += \" \" + skillMods[5];\n        }\n    }\n    return (\n        <div id=\"compProficiency\">\n            <h1>Proficiency Bonus: +{profBonus}</h1>\n            <h2>Choose {maxProfSkills} skills to add proficiency bonus to skill modifier</h2>\n            <ul className=\"profSkills\">\n                <li>{profSkills[0]}</li>\n                <li>{profSkills[1]}</li>\n                <li>{profSkills[2]}</li>\n                <li>{profSkills[3]}</li>\n                <li>{profSkills[4]}</li>\n                <li>{profSkills[5]}</li>\n                <li>{profSkills[6]}</li>\n                <li>{profSkills[7]}</li>\n                <li>{profSkills[8]}</li>\n                <li>{profSkills[9]}</li>\n                <li>{profSkills[10]}</li>\n            </ul>\n            <hr/>\n            <Misc \n                playerClass = {playerClass}\n                playerLevel = {playerLevel}\n                skillMods = {skillMods}\n                hitDice = {hitDice}\n            />\n        </div>\n    )\n}\n\nexport default Proficiency;","import React from 'react';\nimport Proficiency from './Proficiency';\n\nconst Stats = ({playerStats, playerClass, playerLevel, profSkills, maxProfSkills, hitDice}) => {\n    //Calculate stat modifiers\n    var skillMods = [\n        \"+0\",\n        \"+0\",\n        \"+0\",\n        \"+0\",\n        \"+0\",\n        \"+0\"\n    ];\n    for (var i = 0; i <= playerStats.length; i++) {\n        if (playerStats[i] < 10) {\n            skillMods[i] = \"-\" + 1;\n        } else if (playerStats[i] === 10 || playerStats[i] === 11) {\n            skillMods[i] = 0;\n        } else if (playerStats[i] === 12 || playerStats[i] === 13) {\n            skillMods[i] = \"+\" + 1;\n        } else if (playerStats[i] === 14 || playerStats[i] === 15) {\n            skillMods[i] = \"+\" + 2;\n        } else if (playerStats[i] === 16 || playerStats[i] === 17) {\n            skillMods[i] = \"+\" + 3;\n        } else if (playerStats[i] === 18 || playerStats[i] === 19) {\n            skillMods[i] = \"+\" + 4;\n        } else if (playerStats[i] === 20) {\n            skillMods[i] = \"+\" + 5;\n        } else {\n            skillMods[i] = \"\";\n        }\n    }\n    return (\n        <div id=\"compStats\">\n            <h1>Stats</h1>\n                <ul>\n                    <li>STR: {playerStats[0]} ({skillMods[0]})</li>\n                    <li>DEX: {playerStats[1]} ({skillMods[1]})</li>\n                    <li>CON: {playerStats[2]} ({skillMods[2]})</li>\n                    <li>INT: {playerStats[3]} ({skillMods[3]})</li>\n                    <li>WIS: {playerStats[4]} ({skillMods[4]})</li>\n                    <li>CHA: {playerStats[5]} ({skillMods[5]})</li>\n                </ul>\n                <hr/>\n                <Proficiency \n                    playerClass = {playerClass}\n                    playerLevel = {playerLevel}\n                    playerStats = {playerStats}\n                    skillMods = {skillMods}\n                    profSkills = {profSkills}\n                    maxProfSkills = {maxProfSkills}\n                    hitDice = {hitDice}\n                />\n        </div>\n    )\n}\n\nexport default Stats;","import React, {useState} from 'react';\nimport Stats from './Stats';\n\nconst Generate = ({playerRace, playerClass, playerLevel}) => {\n    const [playerStats, setPlayerStats] = useState([]);\n    const [profSkills, setProfSkills] = useState([]);\n    const [maxProfSkills, setMaxProfSkills] = useState(\"\");\n    const [hitDice, setHitDice] = useState(\"d12\");\n    const GenerateStats = () => {\n        let rolls = [\n        Math.floor(Math.random() * (19-9) + 9),\n        Math.floor(Math.random() * (19-9) + 9),\n        Math.floor(Math.random() * (19-9) + 9),\n        Math.floor(Math.random() * (19-9) + 9),\n        Math.floor(Math.random() * (19-9) + 9),\n        Math.floor(Math.random() * (19-9) + 9)\n        ];\n        var stats = [\n            //str 0\n            //dex 1\n            //con 2\n            //int 3\n            //wis 4\n            //cha 5\n        ];\n        rolls.sort((a, b) => b - a);\n\n        //Allocate dice rolls to stats, determine skill modifiers, and assign skill proficiencies based on selected class\n        switch (playerClass) {\n            case \"Barbarian\":\n                stats[0] = rolls[0];\n                stats[1] = rolls[3];\n                stats[2] = rolls[1];\n                stats[3] = rolls[5];\n                stats[4] = rolls[4];\n                stats[5] = rolls[2];\n                setProfSkills([\n                    \"Animal Handling\",\n                    \"Athletics\",\n                    \"Intimidation\",\n                    \"Nature\",\n                    \"Perception\",\n                    \"Survival\"\n                ]);\n                setMaxProfSkills(\"two\");\n                break;\n            case \"Bard\":\n                stats[0] = rolls[5];\n                stats[1] = rolls[1];\n                stats[2] = rolls[4];\n                stats[3] = rolls[2];\n                stats[4] = rolls[3];\n                stats[5] = rolls[0];\n                setProfSkills([\n                    \"Any Skill\"\n                ]);\n                setMaxProfSkills(\"three\");\n                break;\n            case \"Cleric\":\n                stats[0] = rolls[5];\n                stats[1] = rolls[3];\n                stats[2] = rolls[4];\n                stats[3] = rolls[2];\n                stats[4] = rolls[0];\n                stats[5] = rolls[1];\n                setProfSkills([\n                    \"History\",\n                    \"Insight\",\n                    \"Medicine\",\n                    \"Persuasion\",\n                    \"Religion\"\n                ]);\n                setMaxProfSkills(\"two\");\n                break;\n            case \"Druid\":\n                stats[0] = rolls[5];\n                stats[1] = rolls[2];\n                stats[2] = rolls[4];\n                stats[3] = rolls[1];\n                stats[4] = rolls[0];\n                stats[5] = rolls[3];\n                setProfSkills([\n                    \"Arcana\",\n                    \"Animal Handling\",\n                    \"Insight\",\n                    \"Medicine\",\n                    \"Nature\",\n                    \"Perception\",\n                    \"Religion\",\n                    \"Survival\"\n                ]);\n                setMaxProfSkills(\"two\");\n                break;\n            case \"Fighter\":\n                stats[0] = rolls[0];\n                stats[1] = rolls[1];\n                stats[2] = rolls[2];\n                stats[3] = rolls[5];\n                stats[4] = rolls[4];\n                stats[5] = rolls[3];\n                setProfSkills([\n                    \"Acrobatics\",\n                    \"Animal Handling\",\n                    \"Athletics\",\n                    \"History\",\n                    \"Insight\",\n                    \"Intimidation\",\n                    \"Perception\",\n                    \"Survival\"\n                ]);\n                setMaxProfSkills(\"two\");\n                break;\n            case \"Monk\":\n                stats[0] = rolls[2];\n                stats[1] = rolls[0];\n                stats[2] = rolls[3];\n                stats[3] = rolls[4];\n                stats[4] = rolls[1];\n                stats[5] = rolls[5];\n                setProfSkills([\n                    \"Acrobatics\",\n                    \"Athletics\",\n                    \"History\",\n                    \"Insight\",\n                    \"Religion\",\n                    \"Stealth\"\n                ]);\n                setMaxProfSkills(\"two\");\n                break;\n            case \"Paladin\":\n                stats[0] = rolls[0];\n                stats[1] = rolls[5];\n                stats[2] = rolls[2];\n                stats[3] = rolls[4];\n                stats[4] = rolls[3];\n                stats[5] = rolls[1];\n                setProfSkills([\n                    \"Athletics\",\n                    \"Insight\",\n                    \"Intimidation\",\n                    \"Medicine\",\n                    \"Persuasion\",\n                    \"Religion\"\n                ]);\n                setMaxProfSkills(\"two\");\n                break;\n            case \"Ranger\":\n                stats[0] = rolls[5];\n                stats[1] = rolls[0];\n                stats[2] = rolls[3];\n                stats[3] = rolls[2];\n                stats[4] = rolls[1];\n                stats[5] = rolls[4];\n                setProfSkills([\n                    \"Animal Handling\",\n                    \"Athletics\",\n                    \"Insight\",\n                    \"Investigation\",\n                    \"Nature\",\n                    \"Perception\",\n                    \"Stealth\",\n                    \"Survival\"\n                ]);\n                setMaxProfSkills(\"three\");\n                break;\n            case \"Rogue\":\n                stats[0] = rolls[5];\n                stats[1] = rolls[0];\n                stats[2] = rolls[4];\n                stats[3] = rolls[2];\n                stats[4] = rolls[3];\n                stats[5] = rolls[1];\n                setProfSkills([\n                    \"Acrobatics\",\n                    \"Athletics\",\n                    \"Deception\",\n                    \"Insight\",\n                    \"Intimidation\",\n                    \"Investigation\",\n                    \"Perception\",\n                    \"Performance\",\n                    \"Persuasion\",\n                    \"Sleight of Hand\",\n                    \"Stealth\"\n                ]);\n                setMaxProfSkills(\"four\");\n                break;\n            case \"Sorcerer\":\n                stats[0] = rolls[5];\n                stats[1] = rolls[3];\n                stats[2] = rolls[4];\n                stats[3] = rolls[1];\n                stats[4] = rolls[2];\n                stats[5] = rolls[0];\n                setProfSkills([\n                    \"Arcana\",\n                    \"Deception\",\n                    \"Insight\",\n                    \"Intimidation\",\n                    \"Persuasion\",\n                    \"Religion\"\n                ]);\n                setMaxProfSkills(\"two\");\n                break;\n            case \"Warlock\":\n                stats[0] = rolls[5];\n                stats[1] = rolls[3];\n                stats[2] = rolls[4];\n                stats[3] = rolls[1];\n                stats[4] = rolls[2];\n                stats[5] = rolls[0];\n                setProfSkills([\n                    \"Arcana\",\n                    \"Deception\",\n                    \"History\",\n                    \"Intimidation\",\n                    \"Investigation\",\n                    \"Nature\",\n                    \"Religion\"\n                ]);\n                setMaxProfSkills(\"two\");\n                break;\n            case \"Wizard\":\n                stats[0] = rolls[5];\n                stats[1] = rolls[2];\n                stats[2] = rolls[4];\n                stats[3] = rolls[0];\n                stats[4] = rolls[1];\n                stats[5] = rolls[3];\n                setProfSkills([\n                    \"Arcana\",\n                    \"History\",\n                    \"Insight\",\n                    \"Investigation\",\n                    \"Medicine\",\n                    \"Religion\"\n                ]);\n                setMaxProfSkills(\"two\");\n                break;\n            default:\n                break;\n        }\n        // Add racial bonuses to stats based on selected race\n        switch (playerRace) {\n            case \"Dragonborn\":\n                stats[0] += 2;\n                stats[5] += 1;\n                break;\n            case \"Dwarf\":\n                stats[2] += 2;\n                break;\n            case \"Elf\":\n                stats[1] += 2;\n                break;\n            case \"Gnome\":\n                stats[3] += 2;\n                break;\n            case \"Half-Elf\":\n                stats[3] += 1;\n                stats[4] += 1;\n                stats[5] += 2;\n                break;\n            case \"Halfling\":\n                stats[1] += 2;\n                break;\n            case \"Half-Orc\":\n                stats[0] += 2;\n                stats[2] += 1;\n                break;\n            case \"Human\":\n                stats[0] += 1;\n                stats[1] += 1;\n                stats[2] += 1;\n                stats[3] += 1;\n                stats[4] += 1;\n                stats[5] += 1;\n                break;\n            case \"Tiefling\":\n                stats[3] += 1;\n                stats[5] += 2;\n                break;\n            default:\n                break;\n        }\n        setPlayerStats(stats);\n        \n        // Determine Hit Dice based on selected class\n                switch (playerClass) {\n                case \"Barbarian\":\n                    setHitDice(\"d12\");\n                    break;\n                case \"Fighter\":\n                case \"Paladin\":\n                case \"Ranger\":\n                    setHitDice(\"d10\");\n                    break;\n                case \"Bard\":\n                case \"Cleric\":\n                case \"Druid\":\n                case \"Monk\":\n                case \"Rogue\":\n                case \"Warlock\":\n                    setHitDice(\"d8\");\n                    break;\n                case \"Sorcerer\":\n                case \"Wizard\":\n                    setHitDice(\"d6\");\n                    break;\n                default:\n                    break;\n            }\n    }\n    return (\n        <div id=\"compGenerate\">\n            <button onClick={() => GenerateStats()}>Generate</button>\n            <hr/>\n            <Stats \n               playerStats = {playerStats} \n               playerClass = {playerClass}\n               playerLevel = {playerLevel}\n               profSkills = {profSkills}\n               maxProfSkills = {maxProfSkills}\n               hitDice = {hitDice}\n            />\n        </div>\n    )\n}\n\nexport default Generate;","import React from 'react';\nimport Generate from './Generate';\n\nconst Dropdown = ({playerRace, setPlayerRace, playerClass, setPlayerClass, playerLevel, setPlayerLevel}) => {\n    const races = [\n    \"Dragonborn\",\n    \"Dwarf\",\n    \"Elf\",\n    \"Gnome\",\n    \"Half-Elf\",\n    \"Halfling\",\n    \"Half-Orc\",\n    \"Human\",\n    \"Tiefling\"\n  ];\n  const classes = [\n      \"Barbarian\",\n      \"Bard\",\n      \"Cleric\",\n      \"Druid\",\n      \"Fighter\",\n      \"Monk\",\n      \"Paladin\",\n      \"Ranger\",\n      \"Rogue\",\n      \"Sorcerer\",\n      \"Warlock\",\n      \"Wizard\"\n  ];\n\n    const handleRaceChange = (event) => {\n        for (var i = 0; i <= races.length; i++) {\n            if (event.target.value === races[i]) {\n                setPlayerRace(races[i]);\n                break;\n            }\n        }\n    }\n    const handleClassChange = (event) => {\n        for (var i = 0; i <= classes.length; i++) {\n            if (event.target.value === classes[i]) {\n                setPlayerClass(classes[i]);\n                break;\n            }\n        }\n    }\n    const handleLevelChange = (event) => {\n        setPlayerLevel(event.target.value);\n        }\n    return (\n        <div id=\"compDropdown\">\n            <select name=\"race\" id=\"dd-race\" onChange={(e) => handleRaceChange(e)}>\n                <option value={races[0]}>Dragonborn</option>\n                <option value={races[1]}>Dwarf</option>\n                <option value={races[2]}>Elf</option>\n                <option value={races[3]}>Gnome</option>\n                <option value={races[4]}>Half-Elf</option>\n                <option value={races[5]}>Halfling</option>\n                <option value={races[6]}>Half-Orc</option>\n                <option value={races[7]}>Human</option>\n                <option value={races[8]}>Tiefling</option>\n            </select>\n            <select name=\"class\" id=\"dd-class\" onChange={(e) => handleClassChange(e)}>\n                <option value={classes[0]}>Barbarian</option>\n                <option value={classes[1]}>Bard</option>\n                <option value={classes[2]}>Cleric</option>\n                <option value={classes[3]}>Druid</option>\n                <option value={classes[4]}>Fighter</option>\n                <option value={classes[5]}>Monk</option>\n                <option value={classes[6]}>Paladin</option>\n                <option value={classes[7]}>Ranger</option>\n                <option value={classes[8]}>Rogue</option>\n                <option value={classes[9]}>Sorcerer</option>\n                <option value={classes[10]}>Warlock</option>\n                <option value={classes[11]}>Wizard</option>\n            </select>\n            <select name=\"level\" id=\"dd-level\" onChange={(e) => handleLevelChange(e)}>\n                <option value={1}>Level 1</option>\n                <option value={2}>Level 2</option>\n                <option value={3}>Level 3</option>\n                <option value={4}>Level 4</option>\n                <option value={5}>Level 5</option>\n                <option value={6}>Level 6</option>\n                <option value={7}>Level 7</option>\n                <option value={8}>Level 8</option>\n                <option value={9}>Level 9</option>\n                <option value={10}>Level 10</option>\n                <option value={11}>Level 11</option>\n                <option value={12}>Level 12</option>\n                <option value={13}>Level 13</option>\n                <option value={14}>Level 14</option>\n                <option value={15}>Level 15</option>\n                <option value={16}>Level 16</option>\n                <option value={17}>Level 17</option>\n                <option value={18}>Level 18</option>\n                <option value={19}>Level 19</option>\n                <option value={20}>Level 20</option>\n            </select>\n            <Generate \n            playerRace = {playerRace}\n            playerClass = {playerClass}\n            playerLevel = {playerLevel}\n            />\n        </div>\n    )\n}\n\nexport default Dropdown;","import React, {useState} from 'react'; \nimport './App.css';\nimport Dropdown from './Components/Dropdown';\n\nfunction App() {\n  const [playerRace, setPlayerRace] = useState(\"Dragonborn\");\n  const [playerClass, setPlayerClass] = useState(\"Barbarian\");\n  const [playerLevel, setPlayerLevel] = useState(1);\n\n  return (\n    <div className=\"App\">\n      <Dropdown\n        playerRace = {playerRace}\n        setPlayerRace = {setPlayerRace}\n        playerClass = {playerClass}\n        setPlayerClass = {setPlayerClass}\n        playerLevel = {playerLevel}\n        setPlayerLevel = {setPlayerLevel}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}